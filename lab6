#include <iostream>
#include <string>
#include <cstdarg>
#include <vector>
#include <queue>
#include <typeinfo>
#include <cmath>
#include <time.h>

using namespace std;

class Weapons{
    public:
    	int quantity_cartridges, quantity_of_modifications, magazine, magazine_capacity, quantity_of_hits, accuracy;
    	int* array_of_magazine;
    	double weight, caliber, recharge_time, max_range, chance;
    	string name, type_of_magazine;
    	enum shooting_mode {onetap, queue};
        Weapons() {}
        
        ~Weapons(){}
            
        double calculatingTheChance(double range_aim, double max_range) {
            double e = 2.7183;
            double chance;
            chance = pow(e, -(range_aim - 4.5));

            if (chance <= 0)    
            {
                return 0;
            }
            if (chance >= 100) 
            {
                chance = 100;
            }

            
            return chance;
        }
    
        virtual int reload(int) {
            return int();
        }
    
        virtual int shooting(int, double) {
            return int();
        }
        
        virtual string characteristics() {
            return string();
        }
};

class Pistol : public Weapons {
    public:
    Pistol() {
        
        this->name = "Пистолет";
        this->type_of_magazine = "Сменный магазин";
        this->magazine_capacity = 8;
        this->max_range = 1; 
        this->quantity_of_modifications = 5; 
        this->weight = 0.73;
        this->caliber = 9.0;
        this->accuracy = 4;
        this->chance = chance;
        this->recharge_time = recharge_time; 
        this->quantity_cartridges = quantity_cartridges;
        this->array_of_magazine = new int[magazine_capacity];
        this->quantity_of_hits = quantity_of_hits;
        }
    
    ~Pistol() {
    }
    
    int reload(int quantity_cartridges) {
            if (quantity_cartridges > magazine_capacity) {
            quantity_cartridges = magazine_capacity;
            }
            for (int i = 0; i < quantity_cartridges; i++) {
                array_of_magazine[i] = 1;
            }
            recharge_time = 4;
    
        return recharge_time;
    }
    
    int shooting(int mode, double max_aim) {
        quantity_of_hits = 0;
        mode = rand() % 2;
    
        chance = calculatingTheChance(max_aim, max_range);
        
        if (mode == onetap) {
            for (int i = 0; i < magazine_capacity; i++) {
                double temp = 0 + rand() % 100;
                array_of_magazine[i] = 0;
                if (quantity_of_hits < 100) {
                    if (temp < chance)
                    {
                        quantity_of_hits += 1;
                    }
                }
            }
        }
    
        if (mode == queue) {
            for (int i = 0; i < magazine_capacity; i++) {
                double temp = 0 + rand() % 100;
                array_of_magazine[i] = 0;
                if ((quantity_of_hits % 2 == 0) || (quantity_of_hits % 3 == 0)) {  
                    chance -= 8;
                }
                if (quantity_of_hits < 100){
                    if (temp < chance) {
                        quantity_of_hits += 1;
                    }
                }
            }
        }

        //if (chance != 0) {
            return quantity_of_hits;
        /*}
        else {
            return -1;
        }*/
       
    }

    string characteristics()
    {
        return name + "\n\n" +
            "Емкость магазина: " + to_string(magazine_capacity) + "\n" + 
            "Вес: " + to_string(weight) + "\n" +
            "Калибр: " + to_string(caliber) + "\n" +
            "Прицельная дальность: " + to_string(max_range) + "\n" + 
            "Кучность: " + to_string(accuracy) + "\n" + 
            "Количество модификаций: " + to_string(quantity_of_modifications) + "\n";
    }
};

class Rifle : public Weapons {
    public:
    Rifle() {
        
        this->name = "Винтовка";
        this->type_of_magazine = "Перезаряжается по 1 патрону";
        this->magazine_capacity = 10;
        this->max_range = 2; 
        this->quantity_of_modifications = 7; 
        this->weight = 4.5;
        this->caliber = 10.0;
        this->accuracy = 2;
        this->chance = chance;
        this->recharge_time = recharge_time; 
        this->quantity_cartridges = quantity_cartridges;
        this->array_of_magazine = new int[magazine_capacity];
        this->quantity_of_hits = quantity_of_hits;
        }
    
    ~Rifle() {
    }
    
    int reload(int quantity_cartridges) {
            if (quantity_cartridges > magazine_capacity) {
                quantity_cartridges = magazine_capacity;
            }
            
            for (int i = 0; i < quantity_cartridges; i++) {
                array_of_magazine[i] = 1;
            }
            
            recharge_time = 7; 
    
        return recharge_time;
    }
    
    int shooting(int mode, double max_aim) {
        quantity_of_hits = 0;
        mode = 0;
    
        chance = calculatingTheChance(max_aim, max_range);
        
        if (mode == onetap) {
            for (int i = 0; i < magazine_capacity; i++) {
                double temp = 0 + rand() % 100;
                array_of_magazine[i] = 0;
                if (quantity_of_hits < 100) {
                    if (temp < chance)
                    {
                        quantity_of_hits += 1;
                    }
                }
            }
        }

        //if (chance != 0) {
            return quantity_of_hits;
        /*}
        else {
            return -1;
        }*/
       
    }

    string characteristics()
    {
        return name + "\n\n" +
            "Емкость магазина: " + to_string(magazine_capacity) + "\n" + 
            "Вес: " + to_string(weight) + "\n" +
            "Калибр: " + to_string(caliber) + "\n" +
            "Прицельная дальность: " + to_string(max_range) + "\n" + 
            "Кучность: " + to_string(accuracy) + "\n" + 
            "Количество модификаций: " + to_string(quantity_of_modifications) + "\n";
    }
};

class PumpShotgun : public Weapons {
    public:
    PumpShotgun() {
        
        this->name = "Помповый дробовик";
        this->type_of_magazine = "Несъемный";
        this->magazine_capacity = 16;
        this->max_range = 0.5; 
        this->quantity_of_modifications = 2; 
        this->weight = 5.5;
        this->caliber = 2.0;
        this->accuracy = 1;
        this->chance = chance;
        this->recharge_time = recharge_time; 
        this->quantity_cartridges = quantity_cartridges;
        this->array_of_magazine = new int[magazine_capacity];
        this->quantity_of_hits = quantity_of_hits;
        }
    
    ~PumpShotgun() {
    }
    
    int reload(int quantity_cartridges) {
            if (quantity_cartridges > magazine_capacity) {
            quantity_cartridges = magazine_capacity;
            }
            for (int i = 0; i < quantity_cartridges; i++) {
                array_of_magazine[i] = 8;
            }
            recharge_time = quantity_cartridges * 2; 
    
        return recharge_time;
    }
    
    int shooting(int mode, double max_aim) {
        quantity_of_hits = 0;
        mode = 0;
    
        chance = calculatingTheChance(max_aim, max_range);
        
        if (mode == onetap) {
            for (int i = 0; i < magazine_capacity; i++) {
                double temp = 0 + rand() % 100;
                array_of_magazine[i] = 0;
                if (quantity_of_hits < 100) {
                    if (temp < chance)
                    {
                        quantity_of_hits += 1;
                    }
                }
            }
        }
    

        //if (chance != 0) {
            return quantity_of_hits;
       /* }
        else {
            return -1;
        }*/
       
    }

    string characteristics()
    {
        return name + "\n\n" +
            "Емкость магазина: " + to_string(magazine_capacity) + "\n" + 
            "Вес: " + to_string(weight) + "\n" +
            "Калибр: " + to_string(caliber) + "\n" +
            "Прицельная дальность: " + to_string(max_range) + "\n" + 
            "Кучность: " + to_string(accuracy) + "\n" + 
            "Количество модификаций: " + to_string(quantity_of_modifications) + "\n";
    }
};

class Shotgun : public Weapons {
    public:
    Shotgun() {
        
        this->name = "Дробовик";
        this->type_of_magazine = "Сменный магазин";
        this->magazine_capacity = 13;
        this->max_range = 0.9; 
        this->quantity_of_modifications = 6; 
        this->weight = 2.6;
        this->caliber = 2.0;
        this->accuracy = 1;
        this->chance = chance;
        this->recharge_time = recharge_time; 
        this->quantity_cartridges = quantity_cartridges;
        this->array_of_magazine = new int[magazine_capacity];
        this->quantity_of_hits = quantity_of_hits;
        }
    
    ~Shotgun() {
    }
    
    int reload(int quantity_cartridges) {
            if (quantity_cartridges > magazine_capacity) {
            quantity_cartridges = magazine_capacity;
            }
            for (int i = 0; i < quantity_cartridges; i++) {
                array_of_magazine[i] = 1;
            }
            recharge_time = 4;
    
        return recharge_time;
    }
    
    int shooting(int mode, double max_aim) {
        quantity_of_hits = 0;
        mode = 0;
    
        chance = calculatingTheChance(max_aim, max_range);
        
        if (mode == onetap) {
            for (int i = 0; i < magazine_capacity; i++) {
                double temp = 0 + rand() % 100;
                array_of_magazine[i] = 0;
                if (quantity_of_hits < 100) {
                    if (temp < chance)
                    {
                        quantity_of_hits += 1;
                    }
                }
            }
        }
    

        //if (chance != 0) {
            return quantity_of_hits;
        /*}
        else {
            return -1;
        }*/
       
    }

    string characteristics()
    {
        return name + "\n\n" +
            "Емкость магазина: " + to_string(magazine_capacity) + "\n" + 
            "Вес: " + to_string(weight) + "\n" +
            "Калибр: " + to_string(caliber) + "\n" +
            "Прицельная дальность: " + to_string(max_range) + "\n" + 
            "Кучность: " + to_string(accuracy) + "\n" + 
            "Количество модификаций: " + to_string(quantity_of_modifications) + "\n";
    }
};






class ShootingGallery {
    public:
        int N, quantity_of_hits, mode;
    	double number_of_time_reloading;
    	double* aim;
    	double*	temp_chance;
    	vector <Weapons*> weapons;
    	ShootingGallery(int N) {
    	weapons.push_back(new Pistol);
    	weapons.push_back(new Rifle);
    	weapons.push_back(new PumpShotgun);
    	weapons.push_back(new Shotgun);
    	this->N = N;
    	aim = new double[N];
    	temp_chance = new double[N];
    	aim[0] = 0.1;
    	create_aim();
    	weapon_test();
    	clearing_memory();
        }
    
        ~ShootingGallery() {
        }

        void weapon_test() {
            
        	//cout << "Выберите режим: ";
            //cin >> mode;
        
        	for (int count_weapons = 0; count_weapons < weapons.size(); count_weapons++) {
        		number_of_time_reloading = 0;
        		quantity_of_hits = 0;
        
        		for (int i = 0; i < N; i++) {
        			for (int j = 0; j < 100 / weapons[count_weapons]->magazine_capacity; j++) {
        			    //if(quantity_of_hits < 100){
        				//if (weapons[count_weapons]->shooting(mode, aim[i]) != -1) {
        				    //while (quantity_of_hits < 100) {
            					number_of_time_reloading += weapons[count_weapons]->reload(8);
            					quantity_of_hits += weapons[count_weapons]->shooting(mode, aim[i]);
        				    //}
        					
        				//}
        			//}
        			}
                    temp_chance[i] = weapons[count_weapons]->chance;
        		}
        		output_information(count_weapons);
        	}
        }
        
        void create_aim() {
        	for (int i = 1; i < N; i++) {
        		aim[i] = aim[i -1] + 0.1;
        	}
        }
        
        void output_information(int count_weapons)
        {
        	cout << weapons[count_weapons]->characteristics();
            cout << "|Count of hits: " << quantity_of_hits << endl;
        	cout << number_of_time_reloading / 60 << " выстрелов в минуту"<< endl;
        	
        	for (int i = 0; i < N; i++) {
        		cout << "Для " << i + 1 << " мишени шанс = " << temp_chance[i] << endl;
        	}
        }
        
        void clearing_memory()
        {
        	for (int i = 0; i < weapons.size(); i++) { 
        	    delete weapons[i]; 
        	    
        	}
        
        	delete aim, temp_chance;
        }
};

int main() {
	srand(time(0));
	ShootingGallery galary = ShootingGallery(5);
	
}

