#include <iostream>
#include <vector>
#include <algorithm>
#include <math.h>

using namespace std;
template<typename T>
class QuadraticEquation {
    private:
	T a;
	T b;
	T c;
	vector<double> uniqueroots;
	double discriminant, x, x1, x2;
    public:
    	QuadraticEquation() {
        	a = (-100 + rand() % (100 - -100 + 1));
        	b = (-100 + rand() % (100 - -100 + 1));
        	c = (-100 + rand() % (100 - -100 + 1));
        }
    
    	QuadraticEquation(T _a, T _b, T _c) {
        	a = _a;
        	b = _b;
        	c = _c;
        	getDiscriminant();
        	if (discriminant > 0) {
        		discriminantGreaterThan0();
        	}
        	if (discriminant == 0) {
        		theDiscriminantIs0();
        	}
        	if (discriminant < 0) {
        		cout << "Уравнение не имеет корней" << endl;
        	}
        	
        }
    
    	double getDiscriminant()  {
        	discriminant = b * b - 4 * a * c;
        	return discriminant;
        }
    	
    	pair<double, double> discriminantGreaterThan0() {
        	x1 = (-(double)b + sqrt(discriminant)) / 2.0 * (double)a;
        	x2 = (-(double)b - sqrt(discriminant)) / 2.0 * (double)a;
        	cout << "x1: " << x1 << endl << "x2: " << x2 << endl;
        	return pair<double, double>(x1, x2);
        }
    	double theDiscriminantIs0() {
        	x = -(double)b / (2.0 * (double)a);
            cout << "x: " << x << endl;
        	return x;
        }
    	string checkEnteredRoots(T value) {
    	    cout << "Есть ли среди корней введенное пользователем число?";
        	if ((value == x1) || (value == x2) || (value == x)) {
        		return " Есть";
        	}
        	else {
        		return " Нет";
        	}
        }
    	void rootsLessThanEntered(T value) {
    	int count = 0;
    
    	auto const lambda = [value, &count](T _x, T _x1, T _x2) -> int {
    		if (value < _x) {
    			count++;
    		}
    		if (value < _x1) {
    			count++;
    		}
    		if (value < _x2) {
    			count++;
    		}
    		return count;
    	};
    
    	auto const result = lambda(x, x1, x2);
    
    	cout << "Количество корней, которые меньше числа, указанного пользователем: " << result << endl;
    }
    	vector<double> uniqueRoots() {
        	if (discriminant == 0) {
        		uniqueroots.push_back(x);
        	}
        	else if (discriminant > 0) {
        		uniqueroots.push_back(x1);
        		uniqueroots.push_back(x2);
        	}
        	return uniqueroots;
        }
};

template<typename T>
void generate(int N) {   
    double discriminant = 0.0;
    double summ = 0.0;
    vector<double> values;

    vector<QuadraticEquation<T>*> quadraticEquation(N);
    
    generate(quadraticEquation.begin(), quadraticEquation.end(),
        []() 
        { 
            return new QuadraticEquation<T>{};
        });

    for (int i = 0; i < quadraticEquation.size(); i++) {
        discriminant = quadraticEquation[i]->getDiscriminant();
        if (discriminant > 0) {
            auto [_x1, _x2] = quadraticEquation[i]->discriminantGreaterThan0();
            values.push_back(_x1);
            values.push_back(_x2);
        }
        else if(discriminant == 0) {
            auto _x = quadraticEquation[i]->theDiscriminantIs0();
            values.push_back(_x);
        }
    }
    for (int i = 0; i < values.size(); i++) {
        summ += values[i];
    }
    double temp;
    for (int i = 0; i < values.size(); i++) {
        for (int j = i + 1; j < values.size(); j++) {
            if (values[i] < values[j])
            {
                temp = values[i];
                values[i] = values[j];
                values[j] = temp;
            }
        }
    }
    for (int i = 0; i < values.size(); i++) {
        cout << values[i] << endl;
    }
}



int main() {
    srand(time(0));
    QuadraticEquation<int> quadratic(1, 6, 5);
    cout << "\n" << quadratic.checkEnteredRoots(-1) << endl;
    quadratic.rootsLessThanEntered(0.0);
    cout << "Уникальные корни: ";
    for (auto v : quadratic.uniqueRoots()) {
        cout << v << " ";
    }
    generate<int>(30);
}
